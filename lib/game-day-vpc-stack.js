"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameDayVpcStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
class GameDayVpcStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.vpc = new aws_cdk_lib_1.aws_ec2.Vpc(this, "game-day-vpc", {
            vpcName: 'game-day-vpc',
            natGateways: 1,
            maxAzs: 2,
            subnetConfiguration: [
                {
                    name: 'private',
                    subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PRIVATE_WITH_NAT,
                    cidrMask: 24,
                },
                {
                    name: 'public',
                    subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PUBLIC,
                    cidrMask: 24,
                },
                {
                    name: 'isolate',
                    subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PRIVATE_ISOLATED,
                    cidrMask: 28,
                }
            ]
        });
        this.vpc.addFlowLog('FlowLog');
        const publicSubnetIds = this.vpc.publicSubnets.map(s => s.subnetId).join(",");
        new aws_cdk_lib_1.CfnOutput(this, "output-vpc-id", {
            value: this.vpc.vpcId,
            description: "ID de la VPC",
            exportName: 'vpc-id'
        });
        new aws_cdk_lib_1.CfnOutput(this, "PublicSubnetIds", {
            value: publicSubnetIds,
            description: "publicSubnetIds",
            exportName: 'public-subnet-ids',
        });
    }
}
exports.GameDayVpcStack = GameDayVpcStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS1kYXktdnBjLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2FtZS1kYXktdnBjLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFvRTtBQUlwRSxNQUFhLGVBQWdCLFNBQVEsbUJBQUs7SUFHdEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFrQjtRQUN4RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUd4QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUkscUJBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUM3QyxPQUFPLEVBQUUsY0FBYztZQUN2QixXQUFXLEVBQUUsQ0FBQztZQUNkLE1BQU0sRUFBRSxDQUFDO1lBQ1QsbUJBQW1CLEVBQUU7Z0JBQ2pCO29CQUNJLElBQUksRUFBRSxTQUFTO29CQUNmLFVBQVUsRUFBRSxxQkFBTyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0I7b0JBQy9DLFFBQVEsRUFBRSxFQUFFO2lCQUNmO2dCQUNEO29CQUNJLElBQUksRUFBRSxRQUFRO29CQUNkLFVBQVUsRUFBRSxxQkFBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNO29CQUNyQyxRQUFRLEVBQUUsRUFBRTtpQkFDZjtnQkFDRDtvQkFDSSxJQUFJLEVBQUUsU0FBUztvQkFDZixVQUFVLEVBQUUscUJBQU8sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCO29CQUMvQyxRQUFRLEVBQUUsRUFBRTtpQkFDZjthQUNKO1NBQ0osQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFOUIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUU3RSxJQUFJLHVCQUFTLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUNqQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLO1lBQ3JCLFdBQVcsRUFBRSxjQUFjO1lBQzNCLFVBQVUsRUFBRSxRQUFRO1NBQ3ZCLENBQUMsQ0FBQztRQUNILElBQUksdUJBQVMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7WUFDbkMsS0FBSyxFQUFFLGVBQWU7WUFDdEIsV0FBVyxFQUFFLGlCQUFpQjtZQUM5QixVQUFVLEVBQUUsbUJBQW1CO1NBRWxDLENBQUMsQ0FBQztJQUVQLENBQUM7Q0FFSjtBQWhERCwwQ0FnREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhd3NfZWMyLCBDZm5PdXRwdXQsIFN0YWNrLCBTdGFja1Byb3BzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuXG5cbmV4cG9ydCBjbGFzcyBHYW1lRGF5VnBjU3RhY2sgZXh0ZW5kcyBTdGFja3tcbiAgICB2cGM6IGF3c19lYzIuSVZwYztcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IFN0YWNrUHJvcHMpe1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnZwYyA9IG5ldyBhd3NfZWMyLlZwYyh0aGlzLCBcImdhbWUtZGF5LXZwY1wiLCB7XG4gICAgICAgICAgICB2cGNOYW1lOiAnZ2FtZS1kYXktdnBjJyxcbiAgICAgICAgICAgIG5hdEdhdGV3YXlzOiAxLFxuICAgICAgICAgICAgbWF4QXpzOiAyLFxuICAgICAgICAgICAgc3VibmV0Q29uZmlndXJhdGlvbjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3ByaXZhdGUnLFxuICAgICAgICAgICAgICAgICAgICBzdWJuZXRUeXBlOiBhd3NfZWMyLlN1Ym5ldFR5cGUuUFJJVkFURV9XSVRIX05BVCxcbiAgICAgICAgICAgICAgICAgICAgY2lkck1hc2s6IDI0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHVibGljJyxcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0VHlwZTogYXdzX2VjMi5TdWJuZXRUeXBlLlBVQkxJQyxcbiAgICAgICAgICAgICAgICAgICAgY2lkck1hc2s6IDI0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnaXNvbGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIHN1Ym5ldFR5cGU6IGF3c19lYzIuU3VibmV0VHlwZS5QUklWQVRFX0lTT0xBVEVELFxuICAgICAgICAgICAgICAgICAgICBjaWRyTWFzazogMjgsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgdGhpcy52cGMuYWRkRmxvd0xvZygnRmxvd0xvZycpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBwdWJsaWNTdWJuZXRJZHMgPSB0aGlzLnZwYy5wdWJsaWNTdWJuZXRzLm1hcChzID0+IHMuc3VibmV0SWQpLmpvaW4oXCIsXCIpXG4gICAgICAgIFxuICAgICAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsIFwib3V0cHV0LXZwYy1pZFwiLCB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52cGMudnBjSWQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJJRCBkZSBsYSBWUENcIixcbiAgICAgICAgICAgIGV4cG9ydE5hbWU6ICd2cGMtaWQnXG4gICAgICAgIH0pO1xuICAgICAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsIFwiUHVibGljU3VibmV0SWRzXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBwdWJsaWNTdWJuZXRJZHMsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJwdWJsaWNTdWJuZXRJZHNcIixcbiAgICAgICAgICAgIGV4cG9ydE5hbWU6ICdwdWJsaWMtc3VibmV0LWlkcycsXG4gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH1cblxufSJdfQ==