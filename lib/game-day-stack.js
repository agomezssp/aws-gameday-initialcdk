"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameDayStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const vpc_1 = require("./nested-stacks/vpc");
const security_1 = require("./nested-stacks/security");
const bastion_1 = require("./nested-stacks/bastion");
const kms_1 = require("./nested-stacks/kms");
const rds_1 = require("./nested-stacks/rds");
const efs_1 = require("./nested-stacks/efs");
const alb_1 = require("./nested-stacks/alb");
class GameDayStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        aws_cdk_lib_1.Tags.of(this).add('Author', '3HTP');
        aws_cdk_lib_1.Tags.of(this).add('Project', 'GameDay');
        aws_cdk_lib_1.Tags.of(this).add('Environment', this.node.tryGetContext("env"));
        const vpc = new vpc_1.Vpc(this, "Vpc");
        const security = new security_1.Security(this, "Security", { vpc: vpc.vpc });
        new bastion_1.Bastion(this, "Bastion", {
            vpc: vpc.vpc,
            bastionSg: security.bastionSG,
        });
        const gameDayKmsStack = new kms_1.Kms(this, "Kms");
        new rds_1.Rds(this, "Rds", {
            vpc: vpc.vpc,
            bastionSG: security.bastionSG,
            rdsKey: gameDayKmsStack.rdsKey,
        });
        new efs_1.Efs(this, "Efs", { sg: security.efsSG, vpc: vpc.vpc });
        new alb_1.Alb(this, 'Alb', {
            vpc: vpc.vpc,
            sg: security.albSG
        });
    }
}
exports.GameDayStack = GameDayStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS1kYXktc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnYW1lLWRheS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBb0Q7QUFFcEQsNkNBQXdDO0FBQ3hDLHVEQUFrRDtBQUNsRCxxREFBZ0Q7QUFDaEQsNkNBQXdDO0FBQ3hDLDZDQUF3QztBQUN4Qyw2Q0FBd0M7QUFDeEMsNkNBQXdDO0FBR3hDLE1BQWEsWUFBYSxTQUFRLG1CQUFLO0lBQ25DLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBaUI7UUFDdkQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsa0JBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwQyxrQkFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBQ3ZDLGtCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUVoRSxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFakMsTUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUN6QixJQUFJLEVBQ0osVUFBVSxFQUNWLEVBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FDbEIsQ0FBQztRQUVGLElBQUksaUJBQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO1lBQ3pCLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRztZQUNaLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUztTQUNoQyxDQUFDLENBQUM7UUFFSCxNQUFNLGVBQWUsR0FBRyxJQUFJLFNBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFN0MsSUFBSSxTQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtZQUNqQixHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7WUFDWixTQUFTLEVBQUUsUUFBUSxDQUFDLFNBQVM7WUFDN0IsTUFBTSxFQUFFLGVBQWUsQ0FBQyxNQUFNO1NBQ2pDLENBQUMsQ0FBQztRQUdILElBQUksU0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUE7UUFFeEQsSUFBSSxTQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtZQUNqQixHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7WUFDWixFQUFFLEVBQUUsUUFBUSxDQUFDLEtBQUs7U0FDckIsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNKO0FBckNELG9DQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RhY2ssIFN0YWNrUHJvcHMsIFRhZ3N9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHtDb25zdHJ1Y3R9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQge1ZwY30gZnJvbSBcIi4vbmVzdGVkLXN0YWNrcy92cGNcIjtcbmltcG9ydCB7U2VjdXJpdHl9IGZyb20gXCIuL25lc3RlZC1zdGFja3Mvc2VjdXJpdHlcIjtcbmltcG9ydCB7QmFzdGlvbn0gZnJvbSBcIi4vbmVzdGVkLXN0YWNrcy9iYXN0aW9uXCI7XG5pbXBvcnQge0ttc30gZnJvbSBcIi4vbmVzdGVkLXN0YWNrcy9rbXNcIjtcbmltcG9ydCB7UmRzfSBmcm9tIFwiLi9uZXN0ZWQtc3RhY2tzL3Jkc1wiO1xuaW1wb3J0IHtFZnN9IGZyb20gXCIuL25lc3RlZC1zdGFja3MvZWZzXCI7XG5pbXBvcnQge0FsYn0gZnJvbSBcIi4vbmVzdGVkLXN0YWNrcy9hbGJcIjtcblxuXG5leHBvcnQgY2xhc3MgR2FtZURheVN0YWNrIGV4dGVuZHMgU3RhY2t7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFN0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgVGFncy5vZih0aGlzKS5hZGQoJ0F1dGhvcicsICczSFRQJyk7XG4gICAgICAgIFRhZ3Mub2YodGhpcykuYWRkKCdQcm9qZWN0JywgJ0dhbWVEYXknKVxuICAgICAgICBUYWdzLm9mKHRoaXMpLmFkZCgnRW52aXJvbm1lbnQnLCB0aGlzLm5vZGUudHJ5R2V0Q29udGV4dChcImVudlwiKSlcblxuICAgICAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHRoaXMsIFwiVnBjXCIpO1xuXG4gICAgICAgIGNvbnN0IHNlY3VyaXR5ID0gbmV3IFNlY3VyaXR5KFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIFwiU2VjdXJpdHlcIixcbiAgICAgICAgICAgIHt2cGM6IHZwYy52cGMgfVxuICAgICAgICApO1xuXG4gICAgICAgIG5ldyBCYXN0aW9uKHRoaXMsIFwiQmFzdGlvblwiLCB7XG4gICAgICAgICAgICB2cGM6IHZwYy52cGMsXG4gICAgICAgICAgICBiYXN0aW9uU2c6IHNlY3VyaXR5LmJhc3Rpb25TRyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZ2FtZURheUttc1N0YWNrID0gbmV3IEttcyh0aGlzLCBcIkttc1wiKTtcblxuICAgICAgICBuZXcgUmRzKHRoaXMsIFwiUmRzXCIsIHtcbiAgICAgICAgICAgIHZwYzogdnBjLnZwYyxcbiAgICAgICAgICAgIGJhc3Rpb25TRzogc2VjdXJpdHkuYmFzdGlvblNHLFxuICAgICAgICAgICAgcmRzS2V5OiBnYW1lRGF5S21zU3RhY2sucmRzS2V5LFxuICAgICAgICB9KTtcblxuXG4gICAgICAgIG5ldyBFZnModGhpcywgXCJFZnNcIiwge3NnOiBzZWN1cml0eS5lZnNTRywgdnBjOiB2cGMudnBjfSlcblxuICAgICAgICBuZXcgQWxiKHRoaXMsICdBbGInLCB7XG4gICAgICAgICAgICB2cGM6IHZwYy52cGMsXG4gICAgICAgICAgICBzZzogc2VjdXJpdHkuYWxiU0dcbiAgICAgICAgfSlcbiAgICB9XG59Il19