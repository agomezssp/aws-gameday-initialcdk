"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Efs = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_efs_1 = require("aws-cdk-lib/aws-efs");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const vpc_helper_1 = require("../helpers/vpc-helper");
class Efs extends aws_cdk_lib_1.NestedStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const fileSystem = new aws_efs_1.FileSystem(this, 'MyEfsFileSystem', {
            vpc: new aws_ec2_1.Vpc(this, 'VPC'),
            lifecyclePolicy: aws_efs_1.LifecyclePolicy.AFTER_14_DAYS,
            performanceMode: aws_efs_1.PerformanceMode.GENERAL_PURPOSE,
            throughputMode: aws_efs_1.ThroughputMode.BURSTING,
            outOfInfrequentAccessPolicy: aws_efs_1.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS,
            encrypted: true,
            fileSystemName: 'SiteFileSystem',
            securityGroup: props.sg,
            vpcSubnets: props.vpc.selectSubnets({ subnets: vpc_helper_1.oneSubnetByAz(props.vpc.publicSubnets) })
            // vpcSubnets: {
            //     subnets: props.vpc.publicSubnets,
            //     // subnetType: SubnetType.PUBLIC,
            //     //availabilityZones: props.vpc.availabilityZones,
            //     // subnetGroupName: 'PublicEFS'
            //     onePerAz: true,
            // }
        });
        const accesPoint = new aws_efs_1.AccessPoint(this, 'EFSAccessPoint', {
            fileSystem: fileSystem,
            posixUser: { gid: '1000', uid: '1000' },
            createAcl: { ownerGid: "1000", ownerUid: "1000", permissions: "0777" },
            path: '/bitnami'
        });
        this.fs = fileSystem;
        new aws_cdk_lib_1.CfnOutput(this, `EFS-FileSystem-ID`, {
            value: this.fs.fileSystemId,
            description: `ID of EFS FS`,
            exportName: `efs-fs-id`,
        });
        new aws_cdk_lib_1.CfnOutput(this, `EFS-Access-Point`, {
            value: accesPoint.accessPointId,
            description: `EFS Access Point ID`,
            exportName: `efs-access-point-id`,
        });
    }
}
exports.Efs = Efs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWZzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFxRTtBQUVyRSxpREFPNkI7QUFDN0IsaURBQThEO0FBRTlELHNEQUFvRDtBQUdwRCxNQUFhLEdBQUksU0FBUSx5QkFBVztJQUdoQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTJEO1FBQ2pHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sVUFBVSxHQUFHLElBQUksb0JBQVUsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7WUFDdkQsR0FBRyxFQUFFLElBQUksYUFBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7WUFDekIsZUFBZSxFQUFFLHlCQUFlLENBQUMsYUFBYTtZQUM5QyxlQUFlLEVBQUUseUJBQWUsQ0FBQyxlQUFlO1lBQ2hELGNBQWMsRUFBRSx3QkFBYyxDQUFDLFFBQVE7WUFDdkMsMkJBQTJCLEVBQUUscUNBQTJCLENBQUMsY0FBYztZQUN2RSxTQUFTLEVBQUUsSUFBSTtZQUNmLGNBQWMsRUFBRSxnQkFBZ0I7WUFDaEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLFVBQVUsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFDLE9BQU8sRUFBRSwwQkFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUMsQ0FBQztZQUN0RixnQkFBZ0I7WUFDaEIsd0NBQXdDO1lBQ3hDLHdDQUF3QztZQUN4Qyx3REFBd0Q7WUFDeEQsc0NBQXNDO1lBQ3RDLHNCQUFzQjtZQUN0QixJQUFJO1NBQ1AsQ0FBQyxDQUFDO1FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxxQkFBVyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUN2RCxVQUFVLEVBQUUsVUFBVTtZQUN0QixTQUFTLEVBQUUsRUFBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUM7WUFDckMsU0FBUyxFQUFFLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUM7WUFDcEUsSUFBSSxFQUFFLFVBQVU7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUM7UUFFckIsSUFBSSx1QkFBUyxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUNyQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZO1lBQzNCLFdBQVcsRUFBRSxjQUFjO1lBQzNCLFVBQVUsRUFBRSxXQUFXO1NBQzFCLENBQUMsQ0FBQTtRQUVGLElBQUksdUJBQVMsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7WUFDcEMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxhQUFhO1lBQy9CLFdBQVcsRUFBRSxxQkFBcUI7WUFDbEMsVUFBVSxFQUFFLHFCQUFxQjtTQUNwQyxDQUFDLENBQUE7SUFDTixDQUFDO0NBRUo7QUEvQ0Qsa0JBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDZm5PdXRwdXQsIE5lc3RlZFN0YWNrLCBOZXN0ZWRTdGFja1Byb3BzfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7Q29uc3RydWN0fSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHtcbiAgICBBY2Nlc3NQb2ludCxcbiAgICBGaWxlU3lzdGVtLFxuICAgIExpZmVjeWNsZVBvbGljeSxcbiAgICBPdXRPZkluZnJlcXVlbnRBY2Nlc3NQb2xpY3ksXG4gICAgUGVyZm9ybWFuY2VNb2RlLFxuICAgIFRocm91Z2hwdXRNb2RlXG59IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWZzXCI7XG5pbXBvcnQge0lTZWN1cml0eUdyb3VwLCBJVnBjLCBWcGN9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWMyXCI7XG5pbXBvcnQge0lGaWxlU3lzdGVtfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWVmcy9saWIvZWZzLWZpbGUtc3lzdGVtXCI7XG5pbXBvcnQge29uZVN1Ym5ldEJ5QXp9IGZyb20gXCIuLi9oZWxwZXJzL3ZwYy1oZWxwZXJcIjtcblxuXG5leHBvcnQgY2xhc3MgRWZzIGV4dGVuZHMgTmVzdGVkU3RhY2sge1xuICAgIHB1YmxpYyByZWFkb25seSBmczogSUZpbGVTeXN0ZW07XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmVzdGVkU3RhY2tQcm9wcyAmIHsgdnBjOiBJVnBjLCBzZzogSVNlY3VyaXR5R3JvdXAgfSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgICAgICBjb25zdCBmaWxlU3lzdGVtID0gbmV3IEZpbGVTeXN0ZW0odGhpcywgJ015RWZzRmlsZVN5c3RlbScsIHtcbiAgICAgICAgICAgIHZwYzogbmV3IFZwYyh0aGlzLCAnVlBDJyksXG4gICAgICAgICAgICBsaWZlY3ljbGVQb2xpY3k6IExpZmVjeWNsZVBvbGljeS5BRlRFUl8xNF9EQVlTLCAvLyBmaWxlcyBhcmUgbm90IHRyYW5zaXRpb25lZCB0byBpbmZyZXF1ZW50IGFjY2VzcyAoSUEpIHN0b3JhZ2UgYnkgZGVmYXVsdFxuICAgICAgICAgICAgcGVyZm9ybWFuY2VNb2RlOiBQZXJmb3JtYW5jZU1vZGUuR0VORVJBTF9QVVJQT1NFLCAvLyBkZWZhdWx0XG4gICAgICAgICAgICB0aHJvdWdocHV0TW9kZTogVGhyb3VnaHB1dE1vZGUuQlVSU1RJTkcsXG4gICAgICAgICAgICBvdXRPZkluZnJlcXVlbnRBY2Nlc3NQb2xpY3k6IE91dE9mSW5mcmVxdWVudEFjY2Vzc1BvbGljeS5BRlRFUl8xX0FDQ0VTUywgLy8gZmlsZXMgYXJlIG5vdCB0cmFuc2l0aW9uZWQgYmFjayBmcm9tIChpbmZyZXF1ZW50IGFjY2VzcykgSUEgdG8gcHJpbWFyeSBzdG9yYWdlIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIGVuY3J5cHRlZDogdHJ1ZSxcbiAgICAgICAgICAgIGZpbGVTeXN0ZW1OYW1lOiAnU2l0ZUZpbGVTeXN0ZW0nLFxuICAgICAgICAgICAgc2VjdXJpdHlHcm91cDogcHJvcHMuc2csXG4gICAgICAgICAgICB2cGNTdWJuZXRzOiBwcm9wcy52cGMuc2VsZWN0U3VibmV0cyh7c3VibmV0czogb25lU3VibmV0QnlBeihwcm9wcy52cGMucHVibGljU3VibmV0cyl9KVxuICAgICAgICAgICAgLy8gdnBjU3VibmV0czoge1xuICAgICAgICAgICAgLy8gICAgIHN1Ym5ldHM6IHByb3BzLnZwYy5wdWJsaWNTdWJuZXRzLFxuICAgICAgICAgICAgLy8gICAgIC8vIHN1Ym5ldFR5cGU6IFN1Ym5ldFR5cGUuUFVCTElDLFxuICAgICAgICAgICAgLy8gICAgIC8vYXZhaWxhYmlsaXR5Wm9uZXM6IHByb3BzLnZwYy5hdmFpbGFiaWxpdHlab25lcyxcbiAgICAgICAgICAgIC8vICAgICAvLyBzdWJuZXRHcm91cE5hbWU6ICdQdWJsaWNFRlMnXG4gICAgICAgICAgICAvLyAgICAgb25lUGVyQXo6IHRydWUsXG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGFjY2VzUG9pbnQgPSBuZXcgQWNjZXNzUG9pbnQodGhpcywgJ0VGU0FjY2Vzc1BvaW50Jywge1xuICAgICAgICAgICAgZmlsZVN5c3RlbTogZmlsZVN5c3RlbSxcbiAgICAgICAgICAgIHBvc2l4VXNlcjoge2dpZDogJzEwMDAnLCB1aWQ6ICcxMDAwJ30sXG4gICAgICAgICAgICBjcmVhdGVBY2w6IHtvd25lckdpZDogXCIxMDAwXCIsIG93bmVyVWlkOiBcIjEwMDBcIiwgcGVybWlzc2lvbnM6IFwiMDc3N1wifSxcbiAgICAgICAgICAgIHBhdGg6ICcvYml0bmFtaSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5mcyA9IGZpbGVTeXN0ZW07XG5cbiAgICAgICAgbmV3IENmbk91dHB1dCh0aGlzLCBgRUZTLUZpbGVTeXN0ZW0tSURgLCB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5mcy5maWxlU3lzdGVtSWQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYElEIG9mIEVGUyBGU2AsXG4gICAgICAgICAgICBleHBvcnROYW1lOiBgZWZzLWZzLWlkYCxcbiAgICAgICAgfSlcblxuICAgICAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsIGBFRlMtQWNjZXNzLVBvaW50YCwge1xuICAgICAgICAgICAgdmFsdWU6IGFjY2VzUG9pbnQuYWNjZXNzUG9pbnRJZCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgRUZTIEFjY2VzcyBQb2ludCBJRGAsXG4gICAgICAgICAgICBleHBvcnROYW1lOiBgZWZzLWFjY2Vzcy1wb2ludC1pZGAsXG4gICAgICAgIH0pXG4gICAgfVxuXG59Il19