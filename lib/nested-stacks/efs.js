"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Efs = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_efs_1 = require("aws-cdk-lib/aws-efs");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
class Efs extends aws_cdk_lib_1.NestedStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const fileSystem = new aws_efs_1.FileSystem(this, 'MyEfsFileSystem', {
            vpc: new aws_ec2_1.Vpc(this, 'VPC'),
            lifecyclePolicy: aws_efs_1.LifecyclePolicy.AFTER_14_DAYS,
            performanceMode: aws_efs_1.PerformanceMode.GENERAL_PURPOSE,
            throughputMode: aws_efs_1.ThroughputMode.BURSTING,
            outOfInfrequentAccessPolicy: aws_efs_1.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS,
            encrypted: true,
            fileSystemName: 'SiteFileSystem',
            securityGroup: props.sg,
            vpcSubnets: {
                subnets: props.vpc.publicSubnets,
                // subnetType: SubnetType.PUBLIC,
                //availabilityZones: props.vpc.availabilityZones,
                // subnetGroupName: 'PublicEFS'
                onePerAz: true,
            }
        });
        const accesPoint = new aws_efs_1.AccessPoint(this, 'EFSAccessPoint', {
            fileSystem: fileSystem,
            posixUser: { gid: '1000', uid: '1000' },
            createAcl: { ownerGid: "1000", ownerUid: "1000", permissions: "0777" },
            path: '/bitnami'
        });
        this.fs = fileSystem;
        new aws_cdk_lib_1.CfnOutput(this, `EFS-FileSystem-ID`, {
            value: this.fs.fileSystemId,
            description: `ID of EFS FS`,
            exportName: `efs-fs-id`,
        });
        new aws_cdk_lib_1.CfnOutput(this, `EFS-Access-Point`, {
            value: accesPoint.accessPointId,
            description: `EFS Access Point ID`,
            exportName: `efs-access-point-id`,
        });
    }
}
exports.Efs = Efs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWZzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFxRTtBQUVyRSxpREFPNkI7QUFDN0IsaURBQTBFO0FBSTFFLE1BQWEsR0FBSSxTQUFRLHlCQUFXO0lBR2hDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBMkQ7UUFDakcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxvQkFBVSxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRTtZQUN2RCxHQUFHLEVBQUUsSUFBSSxhQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztZQUN6QixlQUFlLEVBQUUseUJBQWUsQ0FBQyxhQUFhO1lBQzlDLGVBQWUsRUFBRSx5QkFBZSxDQUFDLGVBQWU7WUFDaEQsY0FBYyxFQUFFLHdCQUFjLENBQUMsUUFBUTtZQUN2QywyQkFBMkIsRUFBRSxxQ0FBMkIsQ0FBQyxjQUFjO1lBQ3ZFLFNBQVMsRUFBRSxJQUFJO1lBQ2YsY0FBYyxFQUFFLGdCQUFnQjtZQUNoQyxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDdkIsVUFBVSxFQUFFO2dCQUNSLE9BQU8sRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWE7Z0JBQ2hDLGlDQUFpQztnQkFDakMsaURBQWlEO2dCQUNqRCwrQkFBK0I7Z0JBQy9CLFFBQVEsRUFBRSxJQUFJO2FBQ2pCO1NBQ0osQ0FBQyxDQUFDO1FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxxQkFBVyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUN2RCxVQUFVLEVBQUUsVUFBVTtZQUN0QixTQUFTLEVBQUUsRUFBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUM7WUFDckMsU0FBUyxFQUFFLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUM7WUFDcEUsSUFBSSxFQUFFLFVBQVU7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUM7UUFFckIsSUFBSSx1QkFBUyxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUNyQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZO1lBQzNCLFdBQVcsRUFBRSxjQUFjO1lBQzNCLFVBQVUsRUFBRSxXQUFXO1NBQzFCLENBQUMsQ0FBQTtRQUVGLElBQUksdUJBQVMsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7WUFDcEMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxhQUFhO1lBQy9CLFdBQVcsRUFBRSxxQkFBcUI7WUFDbEMsVUFBVSxFQUFFLHFCQUFxQjtTQUNwQyxDQUFDLENBQUE7SUFDTixDQUFDO0NBRUo7QUE5Q0Qsa0JBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDZm5PdXRwdXQsIE5lc3RlZFN0YWNrLCBOZXN0ZWRTdGFja1Byb3BzfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7Q29uc3RydWN0fSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHtcbiAgICBBY2Nlc3NQb2ludCxcbiAgICBGaWxlU3lzdGVtLFxuICAgIExpZmVjeWNsZVBvbGljeSxcbiAgICBPdXRPZkluZnJlcXVlbnRBY2Nlc3NQb2xpY3ksXG4gICAgUGVyZm9ybWFuY2VNb2RlLFxuICAgIFRocm91Z2hwdXRNb2RlXG59IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWZzXCI7XG5pbXBvcnQge0lTZWN1cml0eUdyb3VwLCBJVnBjLCBTdWJuZXRUeXBlLCBWcGN9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWMyXCI7XG5pbXBvcnQge0lGaWxlU3lzdGVtfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWVmcy9saWIvZWZzLWZpbGUtc3lzdGVtXCI7XG5cblxuZXhwb3J0IGNsYXNzIEVmcyBleHRlbmRzIE5lc3RlZFN0YWNrIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgZnM6IElGaWxlU3lzdGVtO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE5lc3RlZFN0YWNrUHJvcHMgJiB7IHZwYzogSVZwYywgc2c6IElTZWN1cml0eUdyb3VwIH0pIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgZmlsZVN5c3RlbSA9IG5ldyBGaWxlU3lzdGVtKHRoaXMsICdNeUVmc0ZpbGVTeXN0ZW0nLCB7XG4gICAgICAgICAgICB2cGM6IG5ldyBWcGModGhpcywgJ1ZQQycpLFxuICAgICAgICAgICAgbGlmZWN5Y2xlUG9saWN5OiBMaWZlY3ljbGVQb2xpY3kuQUZURVJfMTRfREFZUywgLy8gZmlsZXMgYXJlIG5vdCB0cmFuc2l0aW9uZWQgdG8gaW5mcmVxdWVudCBhY2Nlc3MgKElBKSBzdG9yYWdlIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlTW9kZTogUGVyZm9ybWFuY2VNb2RlLkdFTkVSQUxfUFVSUE9TRSwgLy8gZGVmYXVsdFxuICAgICAgICAgICAgdGhyb3VnaHB1dE1vZGU6IFRocm91Z2hwdXRNb2RlLkJVUlNUSU5HLFxuICAgICAgICAgICAgb3V0T2ZJbmZyZXF1ZW50QWNjZXNzUG9saWN5OiBPdXRPZkluZnJlcXVlbnRBY2Nlc3NQb2xpY3kuQUZURVJfMV9BQ0NFU1MsIC8vIGZpbGVzIGFyZSBub3QgdHJhbnNpdGlvbmVkIGJhY2sgZnJvbSAoaW5mcmVxdWVudCBhY2Nlc3MpIElBIHRvIHByaW1hcnkgc3RvcmFnZSBieSBkZWZhdWx0XG4gICAgICAgICAgICBlbmNyeXB0ZWQ6IHRydWUsXG4gICAgICAgICAgICBmaWxlU3lzdGVtTmFtZTogJ1NpdGVGaWxlU3lzdGVtJyxcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXA6IHByb3BzLnNnLFxuICAgICAgICAgICAgdnBjU3VibmV0czoge1xuICAgICAgICAgICAgICAgIHN1Ym5ldHM6IHByb3BzLnZwYy5wdWJsaWNTdWJuZXRzLFxuICAgICAgICAgICAgICAgIC8vIHN1Ym5ldFR5cGU6IFN1Ym5ldFR5cGUuUFVCTElDLFxuICAgICAgICAgICAgICAgIC8vYXZhaWxhYmlsaXR5Wm9uZXM6IHByb3BzLnZwYy5hdmFpbGFiaWxpdHlab25lcyxcbiAgICAgICAgICAgICAgICAvLyBzdWJuZXRHcm91cE5hbWU6ICdQdWJsaWNFRlMnXG4gICAgICAgICAgICAgICAgb25lUGVyQXo6IHRydWUsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGFjY2VzUG9pbnQgPSBuZXcgQWNjZXNzUG9pbnQodGhpcywgJ0VGU0FjY2Vzc1BvaW50Jywge1xuICAgICAgICAgICAgZmlsZVN5c3RlbTogZmlsZVN5c3RlbSxcbiAgICAgICAgICAgIHBvc2l4VXNlcjoge2dpZDogJzEwMDAnLCB1aWQ6ICcxMDAwJ30sXG4gICAgICAgICAgICBjcmVhdGVBY2w6IHtvd25lckdpZDogXCIxMDAwXCIsIG93bmVyVWlkOiBcIjEwMDBcIiwgcGVybWlzc2lvbnM6IFwiMDc3N1wifSxcbiAgICAgICAgICAgIHBhdGg6ICcvYml0bmFtaSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5mcyA9IGZpbGVTeXN0ZW07XG5cbiAgICAgICAgbmV3IENmbk91dHB1dCh0aGlzLCBgRUZTLUZpbGVTeXN0ZW0tSURgLCB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5mcy5maWxlU3lzdGVtSWQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYElEIG9mIEVGUyBGU2AsXG4gICAgICAgICAgICBleHBvcnROYW1lOiBgZWZzLWZzLWlkYCxcbiAgICAgICAgfSlcblxuICAgICAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsIGBFRlMtQWNjZXNzLVBvaW50YCwge1xuICAgICAgICAgICAgdmFsdWU6IGFjY2VzUG9pbnQuYWNjZXNzUG9pbnRJZCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgRUZTIEFjY2VzcyBQb2ludCBJRGAsXG4gICAgICAgICAgICBleHBvcnROYW1lOiBgZWZzLWFjY2Vzcy1wb2ludC1pZGAsXG4gICAgICAgIH0pXG4gICAgfVxuXG59Il19