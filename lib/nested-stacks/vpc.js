"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vpc = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
class Vpc extends aws_cdk_lib_1.NestedStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.vpc = new aws_cdk_lib_1.aws_ec2.Vpc(this, "game-day-vpc", {
            vpcName: 'game-day-vpc',
            natGateways: 1,
            maxAzs: 2,
            subnetConfiguration: [
                {
                    name: 'private',
                    subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PRIVATE_WITH_NAT,
                    cidrMask: 24,
                },
                {
                    name: 'public',
                    subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PUBLIC,
                    cidrMask: 24,
                },
                // {
                //     name: 'staging',
                //     subnetType: aws_ec2.SubnetType.PUBLIC,
                //     cidrMask: 24,
                // },
                {
                    name: 'isolate',
                    subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PRIVATE_ISOLATED,
                    cidrMask: 28,
                }
            ]
        });
        this.vpc.addFlowLog('FlowLog');
        new aws_cdk_lib_1.CfnOutput(this, "output-vpc-id", {
            value: this.vpc.vpcId,
            description: "ID de la VPC",
            exportName: 'vpc-id'
        });
        this.vpc.publicSubnets.forEach((s, i) => new aws_cdk_lib_1.CfnOutput(this, `PublicSubnetId${i}`, {
            value: s.subnetId,
            description: `SubnetId of public subnet ${i}`,
            exportName: `public-subnet-id-${i}`,
        }));
        this.vpc.privateSubnets.forEach((s, i) => new aws_cdk_lib_1.CfnOutput(this, `PrivateSubnetId${i}`, {
            value: s.subnetId,
            description: `SubnetId of private subnet ${i}`,
            exportName: `private-subnet-id-${i}`,
        }));
        this.vpc.isolatedSubnets.forEach((s, i) => new aws_cdk_lib_1.CfnOutput(this, `IsolateSubnetId${i}`, {
            value: s.subnetId,
            description: `SubnetId of isolate subnet ${i}`,
            exportName: `isolate-subnet-id-${i}`,
        }));
    }
}
exports.Vpc = Vpc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUE4RTtBQUk5RSxNQUFhLEdBQUksU0FBUSx5QkFBVztJQUdoQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXdCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBR3hCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxxQkFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO1lBQzdDLE9BQU8sRUFBRSxjQUFjO1lBQ3ZCLFdBQVcsRUFBRSxDQUFDO1lBQ2QsTUFBTSxFQUFFLENBQUM7WUFDVCxtQkFBbUIsRUFBRTtnQkFDakI7b0JBQ0ksSUFBSSxFQUFFLFNBQVM7b0JBQ2YsVUFBVSxFQUFFLHFCQUFPLENBQUMsVUFBVSxDQUFDLGdCQUFnQjtvQkFDL0MsUUFBUSxFQUFFLEVBQUU7aUJBQ2Y7Z0JBQ0Q7b0JBQ0ksSUFBSSxFQUFFLFFBQVE7b0JBQ2QsVUFBVSxFQUFFLHFCQUFPLENBQUMsVUFBVSxDQUFDLE1BQU07b0JBQ3JDLFFBQVEsRUFBRSxFQUFFO2lCQUNmO2dCQUNELElBQUk7Z0JBQ0osdUJBQXVCO2dCQUN2Qiw2Q0FBNkM7Z0JBQzdDLG9CQUFvQjtnQkFDcEIsS0FBSztnQkFDTDtvQkFDSSxJQUFJLEVBQUUsU0FBUztvQkFDZixVQUFVLEVBQUUscUJBQU8sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCO29CQUMvQyxRQUFRLEVBQUUsRUFBRTtpQkFDZjthQUNKO1NBQ0osQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFOUIsSUFBSSx1QkFBUyxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDakMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSztZQUNyQixXQUFXLEVBQUUsY0FBYztZQUMzQixVQUFVLEVBQUUsUUFBUTtTQUN2QixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLHVCQUFTLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLEVBQUUsRUFBRTtZQUM5RSxLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVE7WUFDakIsV0FBVyxFQUFFLDZCQUE2QixDQUFDLEVBQUU7WUFDN0MsVUFBVSxFQUFFLG9CQUFvQixDQUFDLEVBQUU7U0FDdEMsQ0FBQyxDQUFDLENBQUM7UUFFSixJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLHVCQUFTLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLEVBQUUsRUFBRTtZQUNoRixLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVE7WUFDakIsV0FBVyxFQUFFLDhCQUE4QixDQUFDLEVBQUU7WUFDOUMsVUFBVSxFQUFFLHFCQUFxQixDQUFDLEVBQUU7U0FDdkMsQ0FBQyxDQUFDLENBQUM7UUFFSixJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLHVCQUFTLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLEVBQUUsRUFBRTtZQUNqRixLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVE7WUFDakIsV0FBVyxFQUFFLDhCQUE4QixDQUFDLEVBQUU7WUFDOUMsVUFBVSxFQUFFLHFCQUFxQixDQUFDLEVBQUU7U0FDdkMsQ0FBQyxDQUFDLENBQUM7SUFFUixDQUFDO0NBRUo7QUE3REQsa0JBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthd3NfZWMyLCBDZm5PdXRwdXQsIE5lc3RlZFN0YWNrLCBOZXN0ZWRTdGFja1Byb3BzfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7Q29uc3RydWN0fSBmcm9tIFwiY29uc3RydWN0c1wiO1xuXG5cbmV4cG9ydCBjbGFzcyBWcGMgZXh0ZW5kcyBOZXN0ZWRTdGFja3tcbiAgICB2cGM6IGF3c19lYzIuSVZwYztcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IE5lc3RlZFN0YWNrUHJvcHMpe1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLnZwYyA9IG5ldyBhd3NfZWMyLlZwYyh0aGlzLCBcImdhbWUtZGF5LXZwY1wiLCB7XG4gICAgICAgICAgICB2cGNOYW1lOiAnZ2FtZS1kYXktdnBjJyxcbiAgICAgICAgICAgIG5hdEdhdGV3YXlzOiAxLFxuICAgICAgICAgICAgbWF4QXpzOiAyLFxuICAgICAgICAgICAgc3VibmV0Q29uZmlndXJhdGlvbjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3ByaXZhdGUnLFxuICAgICAgICAgICAgICAgICAgICBzdWJuZXRUeXBlOiBhd3NfZWMyLlN1Ym5ldFR5cGUuUFJJVkFURV9XSVRIX05BVCxcbiAgICAgICAgICAgICAgICAgICAgY2lkck1hc2s6IDI0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHVibGljJyxcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0VHlwZTogYXdzX2VjMi5TdWJuZXRUeXBlLlBVQkxJQyxcbiAgICAgICAgICAgICAgICAgICAgY2lkck1hc2s6IDI0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgICBuYW1lOiAnc3RhZ2luZycsXG4gICAgICAgICAgICAgICAgLy8gICAgIHN1Ym5ldFR5cGU6IGF3c19lYzIuU3VibmV0VHlwZS5QVUJMSUMsXG4gICAgICAgICAgICAgICAgLy8gICAgIGNpZHJNYXNrOiAyNCxcbiAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2lzb2xhdGUnLFxuICAgICAgICAgICAgICAgICAgICBzdWJuZXRUeXBlOiBhd3NfZWMyLlN1Ym5ldFR5cGUuUFJJVkFURV9JU09MQVRFRCxcbiAgICAgICAgICAgICAgICAgICAgY2lkck1hc2s6IDI4LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy52cGMuYWRkRmxvd0xvZygnRmxvd0xvZycpXG5cbiAgICAgICAgbmV3IENmbk91dHB1dCh0aGlzLCBcIm91dHB1dC12cGMtaWRcIiwge1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMudnBjLnZwY0lkLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSUQgZGUgbGEgVlBDXCIsXG4gICAgICAgICAgICBleHBvcnROYW1lOiAndnBjLWlkJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52cGMucHVibGljU3VibmV0cy5mb3JFYWNoKChzLGkpID0+IG5ldyBDZm5PdXRwdXQodGhpcywgYFB1YmxpY1N1Ym5ldElkJHtpfWAsIHtcbiAgICAgICAgICAgIHZhbHVlOiBzLnN1Ym5ldElkLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBTdWJuZXRJZCBvZiBwdWJsaWMgc3VibmV0ICR7aX1gLFxuICAgICAgICAgICAgZXhwb3J0TmFtZTogYHB1YmxpYy1zdWJuZXQtaWQtJHtpfWAsXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0aGlzLnZwYy5wcml2YXRlU3VibmV0cy5mb3JFYWNoKChzLGkpID0+IG5ldyBDZm5PdXRwdXQodGhpcywgYFByaXZhdGVTdWJuZXRJZCR7aX1gLCB7XG4gICAgICAgICAgICB2YWx1ZTogcy5zdWJuZXRJZCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgU3VibmV0SWQgb2YgcHJpdmF0ZSBzdWJuZXQgJHtpfWAsXG4gICAgICAgICAgICBleHBvcnROYW1lOiBgcHJpdmF0ZS1zdWJuZXQtaWQtJHtpfWAsXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0aGlzLnZwYy5pc29sYXRlZFN1Ym5ldHMuZm9yRWFjaCgocyxpKSA9PiBuZXcgQ2ZuT3V0cHV0KHRoaXMsIGBJc29sYXRlU3VibmV0SWQke2l9YCwge1xuICAgICAgICAgICAgdmFsdWU6IHMuc3VibmV0SWQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYFN1Ym5ldElkIG9mIGlzb2xhdGUgc3VibmV0ICR7aX1gLFxuICAgICAgICAgICAgZXhwb3J0TmFtZTogYGlzb2xhdGUtc3VibmV0LWlkLSR7aX1gLFxuICAgICAgICB9KSk7XG4gICAgICAgIFxuICAgIH1cblxufSJdfQ==