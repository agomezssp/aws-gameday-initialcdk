"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Security = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
class Security extends aws_cdk_lib_1.NestedStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const { vpc } = props;
        this.bastionSG = this.sgBastion({ vpc });
        this.efsSG = this.sgEFS({ vpc });
        this.albSG = this.sgAlb({ vpc });
    }
    sgBastion(props) {
        return this.sg({
            vpc: props.vpc,
            name: "BastionSG",
            port: aws_ec2_1.Port.tcp(22),
            description: "BastionSG"
        });
    }
    sgEFS(props) {
        return this.sg({
            vpc: props.vpc,
            name: "MountTargetSG",
            port: aws_ec2_1.Port.tcpRange(2049, 2049),
            description: "FileSystem Security Group"
        });
    }
    sgAlb(props) {
        return this.sg({
            vpc: props.vpc,
            name: "Alb-SG",
            port: aws_ec2_1.Port.tcpRange(80, 80),
            description: "Application Load Balance Security Group",
        });
    }
    sg(props) {
        const sg = new aws_ec2_1.SecurityGroup(this, props.name, {
            vpc: props.vpc,
            allowAllOutbound: true,
            description: props.description,
            securityGroupName: props.name,
        });
        aws_cdk_lib_1.Tags.of(sg).add("Name", props.name);
        sg.addIngressRule(aws_ec2_1.Peer.anyIpv4(), props.port);
        new aws_cdk_lib_1.CfnOutput(this, `SG-${props.name}-ID`, {
            value: sg.securityGroupId,
            description: `Security Group ID of ${props.name}`,
            exportName: `sg-${props.name}-id`,
        });
        return sg;
    }
}
exports.Security = Security;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZWN1cml0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBMkU7QUFDM0UsaURBQXFGO0FBT3JGLE1BQWEsUUFBUyxTQUFRLHlCQUFXO0lBS3JDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBeUI7UUFDL0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxFQUFDLEdBQUcsRUFBQyxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQW9CO1FBQzFCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNYLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLElBQUksRUFBRSxXQUFXO1lBQ2pCLElBQUksRUFBRSxjQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNsQixXQUFXLEVBQUUsV0FBVztTQUMzQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQW9CO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNYLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLElBQUksRUFBRSxlQUFlO1lBQ3JCLElBQUksRUFBRSxjQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7WUFDL0IsV0FBVyxFQUFFLDJCQUEyQjtTQUMzQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQW9CO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNYLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLGNBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUMzQixXQUFXLEVBQUUseUNBQXlDO1NBQ3pELENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxFQUFFLENBQUMsS0FBbUU7UUFDbEUsTUFBTSxFQUFFLEdBQUcsSUFBSSx1QkFBYSxDQUN4QixJQUFJLEVBQ0osS0FBSyxDQUFDLElBQUksRUFDVjtZQUNJLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLGdCQUFnQixFQUFFLElBQUk7WUFDdEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ2hDLENBQ0osQ0FBQztRQUNGLGtCQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLEVBQUUsQ0FBQyxjQUFjLENBQ2IsY0FBSSxDQUFDLE9BQU8sRUFBRSxFQUNkLEtBQUssQ0FBQyxJQUFJLENBQ2IsQ0FBQztRQUdGLElBQUksdUJBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7WUFDdkMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxlQUFlO1lBQ3pCLFdBQVcsRUFBRSx3QkFBd0IsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNqRCxVQUFVLEVBQUUsTUFBTSxLQUFLLENBQUMsSUFBSSxLQUFLO1NBQ3BDLENBQUMsQ0FBQTtRQUNGLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUdKO0FBcEVELDRCQW9FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2ZuT3V0cHV0LCBOZXN0ZWRTdGFjaywgTmVzdGVkU3RhY2tQcm9wcywgVGFnc30gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQge0lTZWN1cml0eUdyb3VwLCBJVnBjLCBQZWVyLCBQb3J0LCBTZWN1cml0eUdyb3VwLH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1lYzJcIjtcbmltcG9ydCB7Q29uc3RydWN0fSBmcm9tIFwiY29uc3RydWN0c1wiO1xuXG5pbnRlcmZhY2UgU2VjdXJpdHlTdGFja1Byb3BzIGV4dGVuZHMgTmVzdGVkU3RhY2tQcm9wcyB7XG4gICAgdnBjOiBJVnBjO1xufVxuXG5leHBvcnQgY2xhc3MgU2VjdXJpdHkgZXh0ZW5kcyBOZXN0ZWRTdGFjayB7XG4gICAgcHVibGljIHJlYWRvbmx5IGJhc3Rpb25TRzogSVNlY3VyaXR5R3JvdXA7XG4gICAgcHVibGljIHJlYWRvbmx5IGVmc1NHOiBJU2VjdXJpdHlHcm91cDtcbiAgICBwdWJsaWMgcmVhZG9ubHkgYWxiU0c6IElTZWN1cml0eUdyb3VwO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNlY3VyaXR5U3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgICAgICBjb25zdCB7dnBjfSA9IHByb3BzO1xuICAgICAgICB0aGlzLmJhc3Rpb25TRyA9IHRoaXMuc2dCYXN0aW9uKHt2cGN9KTtcbiAgICAgICAgdGhpcy5lZnNTRyA9IHRoaXMuc2dFRlMoe3ZwY30pO1xuICAgICAgICB0aGlzLmFsYlNHID0gdGhpcy5zZ0FsYih7dnBjfSk7XG4gICAgfVxuXG4gICAgc2dCYXN0aW9uKHByb3BzOiB7IHZwYzogSVZwYyB9KTogSVNlY3VyaXR5R3JvdXAge1xuICAgICAgICByZXR1cm4gdGhpcy5zZyh7XG4gICAgICAgICAgICB2cGM6IHByb3BzLnZwYyxcbiAgICAgICAgICAgIG5hbWU6IFwiQmFzdGlvblNHXCIsXG4gICAgICAgICAgICBwb3J0OiBQb3J0LnRjcCgyMiksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJCYXN0aW9uU0dcIlxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZ0VGUyhwcm9wczogeyB2cGM6IElWcGMgfSk6IElTZWN1cml0eUdyb3VwIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2coe1xuICAgICAgICAgICAgdnBjOiBwcm9wcy52cGMsXG4gICAgICAgICAgICBuYW1lOiBcIk1vdW50VGFyZ2V0U0dcIixcbiAgICAgICAgICAgIHBvcnQ6IFBvcnQudGNwUmFuZ2UoMjA0OSwgMjA0OSksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJGaWxlU3lzdGVtIFNlY3VyaXR5IEdyb3VwXCJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2dBbGIocHJvcHM6IHsgdnBjOiBJVnBjIH0pOiBJU2VjdXJpdHlHcm91cCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNnKHtcbiAgICAgICAgICAgIHZwYzogcHJvcHMudnBjLFxuICAgICAgICAgICAgbmFtZTogXCJBbGItU0dcIixcbiAgICAgICAgICAgIHBvcnQ6IFBvcnQudGNwUmFuZ2UoODAsIDgwKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFwcGxpY2F0aW9uIExvYWQgQmFsYW5jZSBTZWN1cml0eSBHcm91cFwiLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZyhwcm9wczogeyB2cGM6IElWcGMsIGRlc2NyaXB0aW9uOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcG9ydDogUG9ydCB9KSB7XG4gICAgICAgIGNvbnN0IHNnID0gbmV3IFNlY3VyaXR5R3JvdXAoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgcHJvcHMubmFtZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2cGM6IHByb3BzLnZwYyxcbiAgICAgICAgICAgICAgICBhbGxvd0FsbE91dGJvdW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBzZWN1cml0eUdyb3VwTmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgVGFncy5vZihzZykuYWRkKFwiTmFtZVwiLCBwcm9wcy5uYW1lKTtcbiAgICAgICAgc2cuYWRkSW5ncmVzc1J1bGUoXG4gICAgICAgICAgICBQZWVyLmFueUlwdjQoKSxcbiAgICAgICAgICAgIHByb3BzLnBvcnQsXG4gICAgICAgICk7XG5cblxuICAgICAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsIGBTRy0ke3Byb3BzLm5hbWV9LUlEYCwge1xuICAgICAgICAgICAgdmFsdWU6IHNnLnNlY3VyaXR5R3JvdXBJZCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgU2VjdXJpdHkgR3JvdXAgSUQgb2YgJHtwcm9wcy5uYW1lfWAsXG4gICAgICAgICAgICBleHBvcnROYW1lOiBgc2ctJHtwcm9wcy5uYW1lfS1pZGAsXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBzZztcbiAgICB9XG5cblxufVxuIl19